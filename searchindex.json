{"categories":[{"title":"test","uri":"http://heketong.github.io/categories/test/"},{"title":"技术总结","uri":"http://heketong.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"}],"posts":[{"content":" 搭建hugo静态博客记录 1 安装Hugo 我这里是imac所以就直接用brew 其它操作系统也很简单 百度一下一把\nbrew install hugo  2 初始化站点目录 先cd到你想放置的磁盘目录 然后执行一下命令即可 会在当前目录创建站点名称同名目录\n$ hugo new site blog Congratulations! Your new Hugo site is created in /Users/ketonghe/blog. Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026quot;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026quot; command. 2. Perhaps you want to add some content. You can add single files with \u0026quot;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026quot;. 3. Start the built-in live server via \u0026quot;hugo server\u0026quot;. Visit https://gohugo.io/ for quickstart guide and full documentation.  3 安装主题并修改 现在hugo主题商店挺多，我选择了相对干净的hugo-theme-pure 如果没有git环境 可自行百度安装\n$ git clone https://github.com/xiaoheiAh/hugo-theme-pure themes/pure Cloning into 'themes/pure'... remote: Enumerating objects: 13, done. remote: Counting objects: 100% (13/13), done. remote: Compressing objects: 100% (11/11), done. remote: Total 2527 (delta 2), reused 6 (delta 2), pack-reused 2514 Receiving objects: 100% (2527/2527), 4.14 MiB | 519.00 KiB/s, done. Resolving deltas: 100% (1376/1376), done.  config.yml 配置文件主要修改项\nbaseURL 主页 menu 可以将下面的title改为对应的中文 donate 改为自己的微信和支付宝 profile 修改自己头像和介绍  4 写markdown文章 $ hugo new posts/helloworld.md /Users/ketonghe/blog/content/posts/helloworld.md created  用markdown编辑器编辑文章\n5 发布预览 $ hugo server -D | ZH +------------------+----+ Pages | 13 Paginator pages | 0 Non-page files | 0 Static files | 9 Processed images | 0 Aliases | 6 Sitemaps | 1 Cleaned | 0 Total in 91 ms Watching for changes in /Users/ketonghe/blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/ketonghe/blog/config.yml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop  接下来就可以在本地浏览器 输入http://localhost:1313/ 访问了\n这个主题支持站内搜索 还不错\n6 添加评论支持 参考 https://www.smslit.top/2018/07/08/hugo-valine/ 一步步来吧\n7 生成静态页面 ","id":0,"section":"posts","summary":"搭建hugo静态博客记录 1 安装Hugo 我这里是imac所以就直接用brew 其它操作系统也很简单 百度一下一把 brew install hugo 2 初始化站点目录 先cd到你想","tags":["搭建博客"],"title":"create_hugo_blog","uri":"http://heketong.github.io/2020/05/create_hugo_blog/","year":"2020"},{"content":" 图片插入测试 ","id":1,"section":"posts","summary":"图片插入测试","tags":["test"],"title":"test","uri":"http://heketong.github.io/2020/05/test/","year":"2020"},{"content":" 冒泡排序 介绍 ​ 冒泡排序是一种比较简单的排序，之所以叫冒泡，是因为在两两比较的过程中较大的数就像冒泡一样被换到后面。详细解释：依次比较相邻的两个数，前面的数大于后面的数，则交换，将较大的数挪动到后面\n 第1轮: 比较1 \u0026ndash; N 经过依次相邻两两比较交换 最大的数则放到了最后 第2轮: 比较1 \u0026ndash;N-1 经过依次相邻两两比较交换 第2大的数则放到了N-1的位置 第N-1轮:比较1 \u0026ndash; 2 前2个数两两比较交换 整个过程完成  代码  BubbleSort\nfunc BubbleSort(a []int) { if len(a) \u0026lt; 2 { //一个数或者为空 不用排序 return } //外层循环控控制每轮循环两两比较的最大下标 第1次为N-1 最后一次为1(也就是最前面的2个元素) for endPos := len(a) - 1; endPos \u0026gt; 0; endPos-- { //内层循环完成两两比较交换 for i := 0; i \u0026lt; endPos; i++ { if a[i] \u0026gt; a[i+1] { a[i], a[i+1] = a[i+1], a[i] } } } }  \n时间复杂度 ​ O($N^2$)\n稳定性 ​ 稳定 因为如果2个数相等 则他们的相对位置 并没有发生改变\n优化 ​ 看内层循环 如果并没有发生数据交换 则证明所有数据已经排序完成，这个时候直接结束即可 加一个标志判断即可\n BubbleSortOpt\nfunc BubbleSort(a []int) { if len(a) \u0026lt; 2 { //一个数或者为空 不用排序 return } isChg := false //外层循环控控制每轮循环两两比较的最大下标 第1次为N-1 最后一次为1(也就是最前面的2个元素) for endPos := len(a) - 1; endPos \u0026gt; 0; endPos-- { //内层循环完成两两比较交换 for i := 0; i \u0026lt; endPos; i++ { if a[i] \u0026gt; a[i+1] { a[i], a[i+1] = a[i+1], a[i] isChg = true } } if !isChg { //如果内层循环没有发生数据交换 则表明所有数据都已经排序完成 直接退出循环即可 break } } }  \n网搜图解 ​ 摘自: https://www.cnblogs.com/onepixel/p/7674659.html\n插入排序 介绍 ​ 插入排序顾名思义就是将一个待排序的元素，插入到一组已经排好序的元素中，如果形象比喻下，可以想象一下打牌，拿起来第一张牌自然就是排好序的，拿起第二张则跟第一张进行比较，插入到合适的位置。接下来拿第三张 跟前面2张已经排好序的比较，插入合适的位置，依次类推，拿完所有的牌，顺序自然也排好了。\n​ 将待排序的元素分为有序区和无序区，按照顺序每次从无序区拿一个元素，插入插入到有序区，直到所有无序区的元素都插入有序区，整个排序过程结束。第一次有序区为第1个元素，无序区为第2\u0026mdash;N个元素，拿出第2个元素插入到有序区。\n代码  InsertSort\nfunc InsertSort(a []int) { if len(a) \u0026lt; 2 { //一个数或者为空 不用排序 return } //j为无序区的第一个元素 对应下标从1开始，每次后移一个位置 for j := 1; j \u0026lt; len(a); j++ { //内层循环完成比较插入 倒序依次跟有序区的元素进行比较，如果小于有序区的元素 则交换 for i := j; i \u0026gt; 0; i-- { if a[i] \u0026lt; a[i-1] { a[i], a[i-1] = a[i-1], a[i] } } } }  \n时间复杂度 ​ O($N^2$)\n算法稳定性 ​ 稳定 没有改变两个相等元素的相对位置\n优化 ​ 上面代码内层循环在查找待插入位置时是倒序逐个比较的，在查找待插入位置时候是可以优化的，采用二分查找可以有效减少比较次数，但优化后的插入算法则变为不稳定的\n InsertSortOpt\n//BinSerachInsertIndex 二分查找在a数组 begin到end区间 key元素的插入位置 func BinSerachInsertIndex(a []int, begin int, end int, key int) int { pos := -1 //需要插入的位置 for begin \u0026lt;= end { mid := begin + (end-begin)/2 if a[mid] == key { //如果等于key 则找到位置 pos = mid + 1 break } else if a[mid] \u0026lt; key { begin = mid + 1 } else { end = mid - 1 } } if pos == -1 { pos = begin } return pos } func InsertSortOpt(a []int) { if len(a) \u0026lt; 2 { //一个数或者为空 不用排序 return } // for j := 1; j \u0026lt; len(a); j++ { // for i := j; i \u0026gt; 0; i-- { // if a[i] \u0026lt; a[i-1] { // a[i], a[i-1] = a[i-1], a[i] // } // } // } //优化后 for j := 1; j \u0026lt; len(a); j++ { begin, end, key := 0, j-1, a[j] //找到插入的位置 pos := BinSerachInsertIndex(a, begin, end, key) //将pos到end区间的元素逐个后移 for index := j; index \u0026gt; pos; index-- { a[index] = a[index-1] } //插入待排序元素 a[pos] = key } }  \n网搜图解 ​ 摘自:https://www.cnblogs.com/onepixel/p/7674659.html\n归并排序 介绍 ​ MergeSort 合并两个有序的序列为1的大的有序的序列，最典型的归并排序可以分2个大的步骤：\n1 采用递归思想 将一个大的序列:二分为大致平均的子序列，然后针对每个子序列都再递归二分(最后每个子序列长度都为1)\n2 两两子序列合并为有序序列 直到所有子序列合并完成\n​ 整体归并排序也用到了很重要的分治思想，也就是将大的问题分为小的问题 逐个解决\n代码  MergeSort\nfunc MergeSort(a []int, left int, right int) { //校验 if len(a) \u0026lt; 2 || left \u0026lt; 0 || right \u0026gt; len(a) || left \u0026gt;= right { return } mid := left + (right-left)/2 //数组中间位置 MergeSort(a, left, mid) //左边归并排序 MergeSort(a, mid+1, right) //右边递归排序 MergeSlice(a, left, mid, right) //合并2个子序列为大的有序序列 } func MergeSlice(a []int, left int, mid int, right int) { //先生成1个辅助空间 长度 容量都是right-left+1 help := make([]int, right-left+1, right-left+1) helpIndex := 0 //help数组起始位置 填入一个数值 往后移动一位 //定义2个下标 开始分别指向2个子区间的最开始位置 然后逐个遍历 LIndex := left RIndex := mid + 1 for LIndex \u0026lt;= mid \u0026amp;\u0026amp; RIndex \u0026lt;= right { if a[LIndex] \u0026lt;= a[RIndex] { //左边区间数值较小 左边进辅助空间 help[helpIndex] = a[LIndex] LIndex++ } else { help[helpIndex] = a[RIndex] RIndex++ } helpIndex++ //不管左边区间进辅助还是右边区间 辅助数组下标下移一个位置 因为必定进了一个数 } for LIndex \u0026lt;= mid { //如果遍历完成 左边区间还有数没放进辅助数组 那就说明剩下的左边区间数较大 依次cp进辅助 help[helpIndex] = a[LIndex] LIndex++ helpIndex++ } for RIndex \u0026lt;= right { //如果遍历完成 左边区间还有数没放进辅助数组 那就说明剩下的左边区间数较大 依次cp进辅助 help[helpIndex] = a[RIndex] RIndex++ helpIndex++ } //辅助空间已经排好序 覆盖填回原数组 for i := 0; i \u0026lt; helpIndex; i++ { a[left+i] = help[i] } }  \n时间复杂度 ​ O( NLogN)\n算法稳定性 ​ 稳定\n优化 规模较小的时候 不用归并，改为插排 ​ 递归其实非常消耗性能 规模较小的时候可以不再递归 较少递归调用次数\n MergeSortOpt\nfunc MergeSortOpt(a []int, left int, right int) { //一个数 为空 下标不合法 拆分完成 if len(a) \u0026lt; 2 || left \u0026lt; 0 || right \u0026gt; len(a) || left \u0026gt;= right { return } if left+20 \u0026gt;= right {//这里增加几行代码 规模较小 改为插排 InsertSort(a[left : right+1]) return } mid := left + (right-left)/2 //数组中间位置 MergeSort(a, left, mid) //左边归并排序 MergeSort(a, mid+1, right) //右边递归排序 MergeSlice(a, left, mid, right) //合并2个子序列为大的有序序列 }  \n检查合并前两个数组是否已经有序 没有必要再调用合并了  MergeSortOpt2\nfunc MergeSortOpt2(a []int, left int, right int) { //一个数 为空 下标不合法 拆分完成 if len(a) \u0026lt; 2 || left \u0026lt; 0 || right \u0026gt; len(a) || left \u0026gt;= right { return } if left+20 \u0026gt;= right {//这里增加几行代码 规模较小 改为插排 InsertSort(a[left : right+1]) return } mid := left + (right-left)/2 //数组中间位置 MergeSort(a, left, mid) //左边归并排序 MergeSort(a, mid+1, right) //右边递归排序 if a[mid]\u0026lt;=a[mid+1]{//如果2个子序列本身已经有序 无需再合并 return } MergeSlice(a, left, mid, right) //合并2个子序列为大的有序序列 }  \n网搜图解 选择排序 介绍 ​ 每轮都选择一个极值(最大或者最小)放到数组的某一端，其实也是分为有序区和无序区，刚开始全是无序区，\n第1轮 遍历N个数 挑选极值放到数组最左侧 有序区有1个数\n第2轮 遍历剩下的N-1个数，挑选极值放入数组第2个位置，也就是依次放入有序区\n\u0026hellip;\n直到剩下最后一个元素 这个元素自然是整个数组的极值 整个数组排序完成\n代码  SelectSort\nfunc SelectSort(a []int) { if len(a) \u0026lt; 2 { //一个数或者为空 不用排序 return } for j := 0; j \u0026lt; len(a)-1; j++ {//控制每轮循环 遍历比较的元素个数 min := j\t//min记录最小元素下标 for i := j + 1; i \u0026lt; len(a); i++ { if a[min] \u0026gt; a[i] { min = i } } a[j], a[min] = a[min], a[j] //将最小元素依次放入有序区 } }  \n时间复杂度 ​ O($N^2$)\n算法稳定性 ​ 不稳定 会改变两个相等元素本身的相对位置 如 (7) 2 4 8 3 4 [7] 1 第一轮下来(7)会跑到最后\n优化 ​ 修改内层循环，每一轮遍历 不仅找到最小下标 也要找到最大下标 最小放数组左边，最大放数组右边，减少循环次数，当然外层循环条件也要修改，最开始无序区为整个数组 每一轮下来 数组两端2个元素变为有序，有序区从两端往中间扩大，直到所有元素都为有序  SelectSortOpt\nfunc SelectSortOPT(a []int) { if len(a) \u0026lt; 2 { //一个数或者为空 不用排序 return } //刚开始left right分别为数组最小和最大下标 每轮循环left和rignt分别放置最小和最大值 //终止条件为left==right 每轮循环后left右移 right左移 for left, right := 0, len(a)-1; left \u0026lt; right; left, right = left+1, right-1 { minIndex, maxIndex := left, right for i := left; i \u0026lt;= right; i++ { if a[i] \u0026lt; a[minIndex] { //找到最小值下标 minIndex = i } if a[i] \u0026gt; a[maxIndex] { //找到最大值下标 maxIndex = i } } a[left], a[minIndex] = a[minIndex], a[left]//最小的放当前无序区最左边 if left == maxIndex { //如最大下标就是刚开始的最小下标 因为已经交换到了minIndex位置 所以最大下标也要跟着修改 maxIndex = minIndex } a[maxIndex], a[right] = a[right], a[maxIndex]//最大值放到当前无序区最右边 } }  \n网搜图解 ​ 摘自： https://www.cnblogs.com/onepixel/p/7674659.html\n堆排序 介绍 二叉堆介绍 堆排序是借助堆这种数据结构进行排序，又分为最大堆和最小堆。堆也分很多种，这里用二叉堆，下面从网上找到的2张图展示下最大堆和最小堆。\n​ 最大堆 所有父节点都\u0026gt;=两个子节点 最小堆 所有父节点都\u0026lt;=两个子节点\n​ 最大堆 可用于升序排序 最小堆可用于降序排序\n​ 二叉堆实现方式不止一种，这里选择最简单的数组实现，下图展示二叉堆如何用数组存放以及父子节点关系如何对应到数组下标关系。\n堆排序大致过程  首选遍历数组 构建二叉堆(数组实现)\n 交换堆头尾两个元素，也就是数组头尾元素，最大值放到了数组最后一个元素。因为根节点发生变化\n  所以重新堆化，范围不包括最后一个元素，最后一个元素相当于已经输出排序完成，为最大值。\n 对于重新堆化的前面N-1个元素 循环执行第2步 直到输出所有堆节点 完成最终排序  代码 最大堆  MaxHeapSort\nfunc MaxHeapSort(a []int) { size:=len(a)//数组长度 if size \u0026lt; 2 { return } for i := 0; i \u0026lt; len(a); i++ {//遍历数组 构建堆 MaxHeapInsert(a, i) } for size \u0026gt; 0 { a[0], a[size-1] = a[size-1], a[0] //将当前堆顶也就是最大值放到最后 把最后的元素换到堆顶 然后重塑堆 size-- MaxHeapify(a, 0, size) } } func MaxHeapInsert(a []int, index int) { //如果插入节点大于父节点 则需要向上调整 先跟父节点交换 然后再比较上面的父节点 for parentIndex := (index - 1) / 2; a[index] \u0026gt; a[parentIndex]; index, parentIndex = parentIndex, (index-1)/2 { a[index], a[parentIndex] = a[parentIndex], a[index] } } //重新堆化 func MinHeapify(a []int, index int, size int) { for minIndex := -1; minIndex != index; { minIndex = index leftIndex := 2*index + 1 rightIndex := 2*index + 2 //求当前节点 左孩子 右孩子中最小值对应的下标 if leftIndex \u0026lt; size \u0026amp;\u0026amp; a[minIndex] \u0026gt; a[leftIndex] { minIndex = leftIndex } if rightIndex \u0026lt; size \u0026amp;\u0026amp; a[minIndex] \u0026gt; a[rightIndex] { minIndex = rightIndex } if minIndex != index { a[index], a[minIndex] = a[minIndex], a[index] //跟左孩子、右孩子中最小的交换 index = minIndex minIndex = -1 } } }  \n最小堆  MinHeapSort\nfunc MinHeapSort(a []int) { if len(a) \u0026lt; 2 { return } for i := 0; i \u0026lt; len(a); i++ { MinHeapInsert(a, i) } size := len(a) for size \u0026gt; 0 { a[0], a[size-1] = a[size-1], a[0] //将当前堆顶也就是最大值放到最后 把最后的元素换到堆顶 然后重塑堆 size-- MinHeapify(a, 0, size) } } //MinHeapInsert 创建大堆 数组实现 index为要插入的元素下标 //节点下标为i 对应左孩子为2*i+1 右边孩子为2*i+2 //节点下标为i 对应父节点为(i-1)/2 func MinHeapInsert(a []int, index int) { parentIndex := (index - 1) / 2 for a[index] \u0026lt; a[parentIndex] { //如果插入节点小于父节点 则需要向上调整 先跟父节点交换 然后再比较上面的父节点 a[index], a[parentIndex] = a[parentIndex], a[index] index = parentIndex parentIndex = (index - 1) / 2 } } //MinHeapify 下标index发生了变化 重塑堆 一路向下调整 如果两个孩子中有一个比自己小 则交换 然后继续往下调整找到比自己小的孩子 然后跟其交换 //节点下标为i 对应左孩子为2*i+1 右边孩子为2*i+2 //节点下标为i 对应父节点为(i-1)/2 func MinHeapify(a []int, index int, size int) { for minIndex := -1; minIndex != index; { minIndex = index leftIndex := 2*index + 1 rightIndex := 2*index + 2 //求当前节点 左孩子 右孩子中最小值对应的下标 if leftIndex \u0026lt; size \u0026amp;\u0026amp; a[minIndex] \u0026gt; a[leftIndex] { minIndex = leftIndex } if rightIndex \u0026lt; size \u0026amp;\u0026amp; a[minIndex] \u0026gt; a[rightIndex] { minIndex = rightIndex } if minIndex != index { a[index], a[minIndex] = a[minIndex], a[index] //跟左孩子、右孩子中最小的交换 index = minIndex minIndex = -1 } } }  \n优化  堆排序优化\nfunc MergeSortDown2Up(a []int, left int, right int) { //一个数 为空 下标不合法 拆分完成 if len(a) \u0026lt; 2 || left \u0026lt; 0 || right \u0026gt; len(a) || left \u0026gt;= right { return } for time := 1; time \u0026lt;= right; time = time * 2 { MergeGroup(a, right, time) } }  \n","id":2,"section":"posts","summary":"冒泡排序 介绍 ​ 冒泡排序是一种比较简单的排序，之所以叫冒泡，是因为在两两比较的过程中较大的数就像冒泡一样被换到后面。详细解释：依次比较相邻的两","tags":["数据结构","算法","排序"],"title":"排序_数据结构与算法","uri":"http://heketong.github.io/2020/05/%E6%8E%92%E5%BA%8F_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","year":"2020"}],"tags":[{"title":"test","uri":"http://heketong.github.io/tags/test/"},{"title":"排序","uri":"http://heketong.github.io/tags/%E6%8E%92%E5%BA%8F/"},{"title":"搭建博客","uri":"http://heketong.github.io/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"title":"数据结构","uri":"http://heketong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"title":"算法","uri":"http://heketong.github.io/tags/%E7%AE%97%E6%B3%95/"}]}